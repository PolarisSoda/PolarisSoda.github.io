<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="/jekyll-theme-yat/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-07-15T09:19:21+00:00</updated><id>/jekyll-theme-yat/feed.xml</id><title type="html">밤하늘의 빛나는 북극성처럼</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>PolarisSoda</name></author><entry><title type="html">BOJ 1093 : 스티커 수집</title><link href="/jekyll-theme-yat/ps/2024/03/13/BOJ_1093.html" rel="alternate" type="text/html" title="BOJ 1093 : 스티커 수집" /><published>2024-03-13T00:00:00+00:00</published><updated>2024-03-13T00:00:00+00:00</updated><id>/jekyll-theme-yat/ps/2024/03/13/BOJ_1093</id><content type="html" xml:base="/jekyll-theme-yat/ps/2024/03/13/BOJ_1093.html"><![CDATA[<h2 id="link">Link</h2>

<p><a href="https://www.acmicpc.net/problem/1093">https://www.acmicpc.net/problem/1093</a></p>

<h2 id="설명">설명</h2>

<p>간단히 하자면, 스티커의 부분 집합의 가치를 $K$이상으로 할 때, 드는 돈의 최소값을 구하는 것이다. 이 문제에서는 스티커의 판매 가격과 구매 가격이 동일하기 때문에, 지금 가지고 있는 스티커를 전부 돈으로 바꿔도 전혀 문제가 되지 않는다.</p>

<p>이 문제에서 스티커의 개수는 최대 32개이기 때문에 모든 경우의 수를 다 체크하는 Brute Force를 생각해 볼 수 있겠다. 전체를 다 살펴보는 것은 TLE를 받기 때문에 스티커 집합을 반으로 쪼갠 다음, 그 집합 안에서 전체 경우의 수를 세자. 이때 전체 경우의 수는 최대 $2^{16}$이기에 충분히 다 탐색할 수 있다.</p>

<p>탐색이 끝났다면, 한쪽을 <code class="language-plaintext highlighter-rouge">lower_bound</code>를 쓰기 위해 가치를 기준으로 정렬하자. 그리고 정렬된 경우의 수들을 뒤에서부터 탐색하면서, <strong>나보다 큰 가치를 지니지만, 가격은 더 싼 경우의 수의 가격으로 업데이트한다.</strong> 어차피 가치는 $K$를 넘는 것만이 중요하기에, 가치가 넘치는 것은 상관이 없기 때문이다.</p>

<p>이후 정렬하지 않은 경우의 수를 순회하면서 <code class="language-plaintext highlighter-rouge">lower_bound</code>를 사용하여 가격을 구한 뒤, 최소값인지 확인하면서 업데이트하면 된다. 마지막에 최소값에 원래 들고 있던 스티커의 가격을 빼줌으로서, 답을 구할 수 있다.</p>

<h2 id="코드">코드</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">,</span><span class="n">V</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">pll</span><span class="o">&gt;</span> <span class="n">L</span><span class="p">,</span><span class="n">R</span><span class="p">;</span> <span class="c1">//{가격,가치};</span>
<span class="n">ll</span> <span class="n">K</span><span class="p">,</span><span class="n">sum</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">C</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="n">pll</span> <span class="n">a</span><span class="p">,</span><span class="n">pll</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
    <span class="n">V</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">),</span> <span class="n">P</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">V</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">K</span> <span class="o">&gt;&gt;</span> <span class="n">C</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">C</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">temp</span><span class="p">;</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">P</span><span class="p">[</span><span class="n">temp</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">N</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="n">left</span><span class="p">;</span>
    <span class="n">L</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">left</span><span class="p">),</span> <span class="n">R</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">right</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">left</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pll</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">left</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="k">if</span><span class="p">((</span><span class="n">i</span><span class="o">&gt;&gt;</span><span class="n">j</span><span class="p">)</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="n">ret</span><span class="p">.</span><span class="n">first</span> <span class="o">+=</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">ret</span><span class="p">.</span><span class="n">second</span> <span class="o">+=</span> <span class="n">V</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
        <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">right</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pll</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">right</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="k">if</span><span class="p">((</span><span class="n">i</span><span class="o">&gt;&gt;</span><span class="n">j</span><span class="p">)</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="n">ret</span><span class="p">.</span><span class="n">first</span> <span class="o">+=</span> <span class="n">P</span><span class="p">[</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="p">],</span> <span class="n">ret</span><span class="p">.</span><span class="n">second</span> <span class="o">+=</span> <span class="n">V</span><span class="p">[</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="p">];</span>
        <span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">sort</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">R</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">compare</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">right</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
        <span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">,</span><span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>

    <span class="n">ll</span> <span class="n">ret</span> <span class="o">=</span> <span class="mh">0x7FFFFFFF</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">tt</span> <span class="o">:</span> <span class="n">L</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ll</span> <span class="n">price</span> <span class="o">=</span> <span class="n">tt</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="n">tt</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">R</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">K</span><span class="o">-</span><span class="n">val</span><span class="p">),</span><span class="n">compare</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">R</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span><span class="n">price</span> <span class="o">+</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mh">0x7FFFFFFF</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">else</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">ret</span><span class="o">-</span><span class="n">sum</span><span class="p">,</span><span class="mi">0LL</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="여담">여담</h2>

<p>$N$이 작은 경우는 다 탐색할 수 있는지 살펴보는 것도 중요한 것 같다.</p>]]></content><author><name>PolarisSoda</name></author><category term="PS" /><category term="Brute_Force" /><summary type="html"><![CDATA[Link]]></summary></entry><entry><title type="html">BOJ 1420 : 학교 가지마!</title><link href="/jekyll-theme-yat/ps/2024/03/07/BOJ_1420.html" rel="alternate" type="text/html" title="BOJ 1420 : 학교 가지마!" /><published>2024-03-07T00:00:00+00:00</published><updated>2024-03-07T00:00:00+00:00</updated><id>/jekyll-theme-yat/ps/2024/03/07/BOJ_1420</id><content type="html" xml:base="/jekyll-theme-yat/ps/2024/03/07/BOJ_1420.html"><![CDATA[<h2 id="link">Link</h2>

<p><a href="https://www.acmicpc.net/problem/1420">https://www.acmicpc.net/problem/1420</a></p>

<h2 id="설명">설명</h2>

<p>우리는 최선을 다해서 학교 가는 것을 막아야 한다. 학교 가는 것을 막는 것은 일종의 그래프를 끊는 것으로 볼 수 있는데, 이러면 우리는 <strong>최대 유량 최소 컷 정리</strong>를 사용해야 한다.</p>

<p>이제 유량 그래프를 만들어 보자. 실제로 우리가 끊는 것은 각 칸의 간선이 아닌 정점 그 자체므로, 정점을 <code class="language-plaintext highlighter-rouge">in</code>과 <code class="language-plaintext highlighter-rouge">out</code>으로 분할하여 생각하면 된다. 한 정점 안의 <code class="language-plaintext highlighter-rouge">in</code>과 <code class="language-plaintext highlighter-rouge">out</code>에서는 용량이 1인 간선으로 연결하고, 다른 정점과 연결되는 간선에는 용량을 매우 크게 주면 된다.</p>

<p>이제 유량 그래프를 만들었다면, 실제 흐르는 최대 유량을 구할 차례이다. 그전에 유량의 시작점과 도착점이 딱 붙어있는지 확인하여 따로 처리를 해준다. 유량을 구할 때 나는 디닉을 사용하였다. 이 문제에서 문제점은 용량과 유량 배열을 미리 정해두면, 메모리 초과가 난다는 것이었다. 그래서 그냥 나는 <code class="language-plaintext highlighter-rouge">std::map</code>을 사용했다.</p>

<p>디닉에 대해서는 따로 설명은 하지 않겠다. 아무튼 디닉을 이용해서 최대 유량을 구하면 그것이 곧 그래프를 단절 시키는데 필요한 최소 비용이다. 잘 출력하자.</p>

<h2 id="코드">코드</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>

<span class="k">constexpr</span> <span class="kt">int</span> <span class="n">LEN</span> <span class="o">=</span> <span class="mi">20002</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mh">0x7FFFFFF</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">edge</span><span class="p">[</span><span class="n">LEN</span><span class="p">];</span> <span class="c1">//간선</span>
<span class="kt">char</span> <span class="n">label</span><span class="p">[</span><span class="mi">101</span><span class="p">][</span><span class="mi">101</span><span class="p">];</span>

<span class="n">map</span><span class="o">&lt;</span><span class="n">pii</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">C</span><span class="p">,</span><span class="n">F</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">level</span><span class="p">[</span><span class="n">LEN</span><span class="p">],</span><span class="n">work</span><span class="p">[</span><span class="n">LEN</span><span class="p">];</span> <span class="c1">//레벨, 이미 탐색한 간선 알려줌.</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">,</span><span class="n">S</span><span class="p">,</span><span class="n">T</span><span class="p">;</span> <span class="c1">//시작점, 끝점.</span>

<span class="kt">bool</span> <span class="nf">Approx</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">M</span> <span class="o">&amp;&amp;</span> <span class="n">y</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span><span class="o">&lt;</span><span class="n">N</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">bool</span> <span class="nf">Label</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">level</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">level</span><span class="p">));</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">task</span><span class="p">;</span>
    <span class="n">task</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">S</span><span class="p">);</span>
    <span class="n">level</span><span class="p">[</span><span class="n">S</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">task</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="n">task</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">task</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">next</span> <span class="o">:</span> <span class="n">edge</span><span class="p">[</span><span class="n">now</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">level</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">C</span><span class="p">[{</span><span class="n">now</span><span class="p">,</span><span class="n">next</span><span class="p">}]</span><span class="o">-</span><span class="n">F</span><span class="p">[{</span><span class="n">now</span><span class="p">,</span><span class="n">next</span><span class="p">}]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">level</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="o">=</span> <span class="n">level</span><span class="p">[</span><span class="n">now</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                <span class="n">task</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">level</span><span class="p">[</span><span class="n">T</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">DFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span><span class="kt">int</span> <span class="n">flow</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="n">T</span><span class="p">)</span> <span class="k">return</span> <span class="n">flow</span><span class="p">;</span> 

    <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span><span class="o">=</span><span class="n">work</span><span class="p">[</span><span class="n">now</span><span class="p">];</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">sz</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="n">now</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="n">level</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="o">==</span> <span class="n">level</span><span class="p">[</span><span class="n">now</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">C</span><span class="p">[{</span><span class="n">now</span><span class="p">,</span><span class="n">next</span><span class="p">}]</span><span class="o">-</span><span class="n">F</span><span class="p">[{</span><span class="n">now</span><span class="p">,</span><span class="n">next</span><span class="p">}]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="n">next</span><span class="p">,</span><span class="n">min</span><span class="p">(</span><span class="n">flow</span><span class="p">,</span><span class="n">C</span><span class="p">[{</span><span class="n">now</span><span class="p">,</span><span class="n">next</span><span class="p">}]</span><span class="o">-</span><span class="n">F</span><span class="p">[{</span><span class="n">now</span><span class="p">,</span><span class="n">next</span><span class="p">}]));</span>
            <span class="k">if</span><span class="p">(</span><span class="n">amount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">F</span><span class="p">[{</span><span class="n">now</span><span class="p">,</span><span class="n">next</span><span class="p">}]</span> <span class="o">+=</span> <span class="n">amount</span><span class="p">;</span>
                <span class="n">F</span><span class="p">[{</span><span class="n">next</span><span class="p">,</span><span class="n">now</span><span class="p">}]</span> <span class="o">-=</span> <span class="n">amount</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">amount</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//하나의 정점이 부여받은 idx에 대해, idx는 in idx+1는 out</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sx</span><span class="p">,</span><span class="n">sy</span><span class="p">,</span><span class="n">tx</span><span class="p">,</span><span class="n">ty</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">idx</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">label</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="n">label</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">label</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'K'</span><span class="p">)</span> <span class="n">S</span> <span class="o">=</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">sx</span> <span class="o">=</span> <span class="n">j</span><span class="p">,</span> <span class="n">sy</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">label</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'H'</span><span class="p">)</span> <span class="n">T</span> <span class="o">=</span> <span class="n">idx</span><span class="p">,</span> <span class="n">tx</span> <span class="o">=</span> <span class="n">j</span><span class="p">,</span> <span class="n">ty</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

        <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
        <span class="n">C</span><span class="p">[{</span><span class="n">idx</span><span class="p">,</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">}]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">if</span><span class="p">(</span><span class="n">Approx</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">label</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="p">);</span>
            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">C</span><span class="p">[{</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="p">}]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>

            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">C</span><span class="p">[{</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">idx</span><span class="p">}]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">Approx</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">label</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">M</span><span class="p">);</span>
            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">M</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">C</span><span class="p">[{</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">M</span><span class="p">}]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>

            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
            <span class="n">edge</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">C</span><span class="p">[{</span><span class="n">idx</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">idx</span><span class="p">}]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">sx</span><span class="o">-</span><span class="n">tx</span><span class="p">)</span><span class="o">+</span><span class="n">abs</span><span class="p">(</span><span class="n">sy</span><span class="o">-</span><span class="n">ty</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">Label</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">work</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">work</span><span class="p">));</span>
        <span class="kt">int</span> <span class="n">flow</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="n">INF</span><span class="p">);</span>
        <span class="k">while</span><span class="p">(</span><span class="n">flow</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">flow</span><span class="p">;</span>
            <span class="n">flow</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="n">INF</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span><span class="p">;</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="여담">여담</h2>

<p>확실히 유량 쪽이 어렵다. 이게 유량인지 잘 보이지도 않는다.</p>]]></content><author><name>PolarisSoda</name></author><category term="PS" /><category term="MFMC" /><summary type="html"><![CDATA[Link]]></summary></entry><entry><title type="html">BOJ 1084 : 방 번호 2</title><link href="/jekyll-theme-yat/ps/2024/02/27/BOJ_1084.html" rel="alternate" type="text/html" title="BOJ 1084 : 방 번호 2" /><published>2024-02-27T00:00:00+00:00</published><updated>2024-02-27T00:00:00+00:00</updated><id>/jekyll-theme-yat/ps/2024/02/27/BOJ_1084</id><content type="html" xml:base="/jekyll-theme-yat/ps/2024/02/27/BOJ_1084.html"><![CDATA[<h2 id="link">Link</h2>

<p><a href="https://www.acmicpc.net/problem/1084">https://www.acmicpc.net/problem/1084</a></p>

<h2 id="설명">설명</h2>

<p>보통 최대 자릿수를 찾는 이러한 문제들은 그리디로 푸는 편이다. 우리가 고려할 점은 2가지이다.</p>

<ol>
  <li><strong>자릿수를 최대로 만든다.</strong></li>
  <li><strong>큰 자릿수부터 큰 수로 교환이 가능하면 교환한다.</strong></li>
</ol>

<p>일단은 1번부터 고려해보자. 자릿수를 최대로 만들려고 하면 가격이 가장 낮은 숫자로 채우는 것이 좋다는 것은 자명하다. 그렇기에 정렬을 하든 따로 구하든 하여서 만들 수 있는 최대자릿수를 만들자.</p>

<p>이제 2번의 경우는 여러 가지로 나뉜다. 먼저 현재 만들어진 수에서 적절하게 교환한다. 어떻게든 큰 수로 만들어야 하기에 때문에 큰 수부터 순회하면서 현재 남은 가격으로 얼만큼 교환이 가능한지 체크해가면서 교환해간다. 여기서 추가로 고려해야 할 점은, 가장 작은 가격의 숫자가 0이고, 아무것도 교환하지 못했을 때이다. 이때부터는 최대자릿수를 줄여야 하기에, 자릿수를 가장 적게 줄이면서 가장 큰 숫자를 찾으면 된다.</p>

<h2 id="코드">코드</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">pil</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">pil</span><span class="o">&gt;</span> <span class="n">card</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">price</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="n">cnt</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="n">ll</span> <span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="n">pil</span> <span class="n">a</span><span class="p">,</span><span class="n">pil</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">PR</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ll</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">zero_only</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">zero_only</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">zero_only</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"1</span><span class="se">\n</span><span class="s">0</span><span class="se">\n</span><span class="s">0</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">sum</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="n">ll</span> <span class="n">bias</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span><span class="mi">50LL</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">bias</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="n">ll</span> <span class="n">count</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">bias</span><span class="p">,</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">count</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">bias</span> <span class="o">-=</span> <span class="n">count</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

        <span class="n">bias</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span><span class="mi">50LL</span><span class="p">);</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">r_ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">bias</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="n">ll</span> <span class="n">count</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">bias</span><span class="p">,</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">count</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">r_ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
            <span class="n">bias</span> <span class="o">-=</span> <span class="n">count</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span><span class="o">=</span><span class="n">r_ans</span><span class="p">.</span><span class="n">rbegin</span><span class="p">();</span> <span class="n">it</span><span class="o">!=</span><span class="n">r_ans</span><span class="p">.</span><span class="n">rend</span><span class="p">();</span> <span class="n">it</span><span class="o">++</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">card</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">i</span><span class="p">,</span><span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">]});</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">card</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">card</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">compare</span><span class="p">);</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">minv</span> <span class="o">=</span> <span class="n">card</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
    <span class="n">ll</span> <span class="n">max_radix</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">[</span><span class="n">minv</span><span class="p">]</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">card</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
    <span class="n">M</span> <span class="o">%=</span> <span class="n">card</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">max_radix</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">minv</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ll</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">card</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">diff</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">swap</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">minv</span><span class="p">],</span><span class="n">cnt</span><span class="p">[</span><span class="n">max</span><span class="p">(</span><span class="n">minv</span><span class="p">,</span><span class="n">i</span><span class="p">)]);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">ll</span> <span class="n">inc</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">M</span><span class="o">/</span><span class="n">diff</span><span class="p">,</span><span class="n">cnt</span><span class="p">[</span><span class="n">minv</span><span class="p">]);</span>
        <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">inc</span><span class="p">,</span> <span class="n">cnt</span><span class="p">[</span><span class="n">minv</span><span class="p">]</span> <span class="o">-=</span> <span class="n">inc</span><span class="p">;</span>
        <span class="n">M</span> <span class="o">-=</span> <span class="n">inc</span><span class="o">*</span><span class="n">diff</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">max_radix</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">s_idx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">ll</span> <span class="n">reduced</span> <span class="o">=</span> <span class="n">max_radix</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ll</span> <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">M</span><span class="p">)</span><span class="o">/</span><span class="n">price</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">if</span><span class="p">((</span><span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">M</span><span class="p">)</span><span class="o">%</span><span class="n">price</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">val</span><span class="o">++</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">reduced</span><span class="p">)</span> <span class="n">s_idx</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="n">reduced</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">s_idx</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">cnt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="n">reduced</span><span class="p">,</span> <span class="n">cnt</span><span class="p">[</span><span class="n">s_idx</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">PR</span><span class="p">();</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="여담">여담</h2>

<p>구현한번 귀찮다.</p>]]></content><author><name>PolarisSoda</name></author><category term="PS" /><category term="Greedy" /><summary type="html"><![CDATA[Link]]></summary></entry><entry><title type="html">갈아엎었습니다.</title><link href="/jekyll-theme-yat/notice/2024/02/13/renewal.html" rel="alternate" type="text/html" title="갈아엎었습니다." /><published>2024-02-13T00:00:00+00:00</published><updated>2024-02-13T00:00:00+00:00</updated><id>/jekyll-theme-yat/notice/2024/02/13/renewal</id><content type="html" xml:base="/jekyll-theme-yat/notice/2024/02/13/renewal.html"><![CDATA[<h2 id="왜-갈아엎었니">왜 갈아엎었니?</h2>

<p>사실 제가 결정장애가 있어어요. 맨 처음에 제가 Github Page로 블로그 만들 때 이 테마로 했었는데, 그때는 웹 사이트에 대해 잘 몰라서 폰트도 맘에 안들고, 어떻게 바꾸어야 할지도 잘 몰랐죠.</p>

<p>근데 바꾼것도 다시 보니 마음에 안들어서 구관이 명관이란 말도 있듯이, 그냥 이제 아예 이걸로 쓰기로 결정했습니다. 걍 여기서 맘에 안드는 건 제가 고치렵니다.</p>

<h2 id="그래서-뭐-할건데">그래서 뭐 할건데?</h2>

<p>언제나 그랬듯이, PS코드 아카이브를 제일 많이 할까 싶네요. 어차피 비공개인데, 맘껏 쓰렵니다. 언제 충분히 글이 쌓였으면 구글에 노출 생각해보죠.</p>

<p>아니면 디맥성과좀 올려야지 히히</p>]]></content><author><name>PolarisSoda</name></author><category term="NOTICE" /><category term="NOTICE" /><summary type="html"><![CDATA[왜 갈아엎었니?]]></summary></entry><entry><title type="html">BOJ 15572 : 블록 4</title><link href="/jekyll-theme-yat/ps/2024/02/06/BOJ_15572.html" rel="alternate" type="text/html" title="BOJ 15572 : 블록 4" /><published>2024-02-06T00:00:00+00:00</published><updated>2024-02-06T00:00:00+00:00</updated><id>/jekyll-theme-yat/ps/2024/02/06/BOJ_15572</id><content type="html" xml:base="/jekyll-theme-yat/ps/2024/02/06/BOJ_15572.html"><![CDATA[<h2 id="link">Link</h2>

<p><a href="https://www.acmicpc.net/problem/15572">https://www.acmicpc.net/problem/15572</a></p>

<h2 id="설명">설명</h2>

<p>일정한 구간을 타일로 채우는 문제. 어디선가 매우 많이 본 것 같은 문제이다. 차근차근 처음부터 살펴보자.</p>

<p>우리는 현재 `N×(1~N)`의 블록을 가지고 있다. 그리고 `N×M`형태의 모양을 만들어야 한다. 블록은 어떻게든 놓을 수 있지만, 일단 `N&gt;M`인 형태부터 먼저 살펴보겠다.</p>

<p>`M`이 `N`보다 작고 `N`이 세로라고 가정한다면, 우리는 블록을 세로로 밖에 놓을 수 없다. 그렇다면 이때의 경우의 수는 `M`이라는 수를 여러 수로 쪼개는 경우의 수라고 생각할 수 있다. 조금 더 비유를 하자면, 1이 `M`개 있을 때, 그 사이에 칸막이를 넣는지 안 넣는지에 대한 경우의 수로 나타낼 수 있으며, `N`보다 작은 `M`에 대하여 그 개수는
$$ 2^{M-1} (M&lt;N)$$
라고 표현할 수 있다. 만약 `N`이랑 `M`이 같을 경우는 이제 블록을 90도 회전해서 넣어도 되므로, 경우의 수가 2배로 늘고, `N×N` 블록의 수만 제외해 주면 되므로
$$ 2^N-1 (M = N)$$
가 된다.</p>

<p>이제 이 사실을 바탕으로 다음으로 넘어가 보자. 이제 앞으로 `N×k`개의 블록을 채우는 경우의 수를 `A_k`라고 칭하겠다. 그렇다면 이제 `N`보다 큰 `M`에 대해서 다음과 같이 생각해 볼 수 있겠다.</p>

<p>$$ A_M = \sum\limits_{i=1}^N A_{i}A_{M-i} $$</p>

<p>즉, 전체의 구간을 나눠서 생각을 하겠다는 것이다. `N`이하의 `M`에 대해서는 명확히 우리가 구할 수 있고, 아닌 수에 대해서는 N이하 경우의 수의 곱으로 나타낼 수 있기에 다음과 같은 식을 도출할 수 있다. 하지만 과연 이 식이 맞을까?</p>

<p>아쉽게도 이 식은 중복된 경우의 수를 카운트한다. `N×1`과 `N×2`의 케이스를 한번 살펴보자. `N×1`를 만드는 경우는 딱 하나다. `N×1`하나만 틱 놓는 것. `N × 2`는 `N × 1` 2개를 놓는 것과 `N × 2` 하나를 놓는 것 총 2가지의 경우가 있다. 이때 `N×2`에서 `N×1` 2개를 놓은 경우의 수는 `N×1`의 경우의 수와 겹치게 된다.</p>

<p>따라서 이런 식으로 접근하려면, `N×k(1&lt;=k&lt;=N)`를 앞선 경우의 수와 차별되게 놓아야 한다. 이제 `C_k`를 다음과 같이 정의하자.</p>
<blockquote>
  <p>`C_k =` `k`보다 작은 `j`에 대하여, `N×j`를 만들 때 사용한 경우의 수를 포함하지 않는 `N×k`를 만드는 경우의 수.</p>
</blockquote>

<p>그렇다면 우리가 새로한 `C_k`를 가지고 다시 식을 고쳐 쓸 수 있다. 전체 경우의 수는</p>

<p>$$ A_M = \sum\limits_{i=1}^N C_{i}A_{M-i} $$</p>

<p>가 된다. 이제 `C_k`를 다시 살펴보자. 말은 저렇게 복잡하게 했지만, 실제로 유일하게 만들 수 있는 경우의 수는 `N×k`만 놓는 경우의 수 딱 하나밖에 없다. 예외로 `N×N`의 크기는 가로로 뒤집을 수도 있으니 따로 처리해주고, 전체 `C_K`는 다음과 같다.</p>

<p>$$ C_K = 
\begin{cases}
1 &amp; (K &lt; N) <br />
2^{N-1} &amp; (K = N)
\end{cases}
$$</p>

<p>그리고 `A_K`는</p>

<p>$$ 
A_K = 
\begin{cases}
2^{K-1} &amp; (K &lt; N) <br />
2^{N} - 1 &amp; (K = N)
\end{cases} 
$$</p>

<p>로 나타낼 수 있다.</p>

<p>이제 저런 형식의 점화식은 수가 적당히 작다면 분할정복을 이용한 거듭제곱을 통해 행렬을 곱해서 구할 수 있지만, 현재 이 문제의 수 제한은 큰 편이므로 이 점화식을 이용해 빠르게 특정 항을 구할 수 있는 키타마사법을 사용하면 된다.</p>

<h2 id="코드">코드</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>

<span class="k">constexpr</span> <span class="n">ll</span> <span class="n">DIV</span> <span class="o">=</span> <span class="mi">1999</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">int</span> <span class="n">LEN</span> <span class="o">=</span> <span class="mi">100001</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">A</span><span class="p">[</span><span class="n">LEN</span><span class="p">],</span><span class="n">C</span><span class="p">[</span><span class="n">LEN</span><span class="p">],</span><span class="n">D</span><span class="p">[</span><span class="n">LEN</span><span class="p">],</span><span class="n">T</span><span class="p">[</span><span class="n">LEN</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">Kitamasa</span><span class="p">(</span><span class="n">ll</span> <span class="n">N</span><span class="p">,</span><span class="kt">int</span> <span class="n">M</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">D</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">N</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Kitamasa</span><span class="p">(</span><span class="n">N</span><span class="o">^</span><span class="mi">1</span><span class="p">,</span><span class="n">M</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">D</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">C</span><span class="p">[</span><span class="n">M</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">j</span><span class="p">)</span><span class="o">%</span><span class="n">DIV</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">Kitamasa</span><span class="p">(</span><span class="n">N</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">,</span><span class="n">M</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">M</span><span class="o">+</span><span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">D</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><span class="o">%</span><span class="n">DIV</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">M</span><span class="o">+</span><span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">C</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">%</span><span class="n">DIV</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    
    <span class="n">ll</span> <span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">C</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">%</span><span class="n">DIV</span><span class="p">;</span>
        <span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">A</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">A</span><span class="p">[</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span><span class="o">%</span><span class="n">DIV</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">DIV</span><span class="p">;</span>
    <span class="n">C</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">%</span><span class="n">DIV</span><span class="p">;</span>


    <span class="n">Kitamasa</span><span class="p">(</span><span class="n">M</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
    <span class="n">ll</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">ans</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">%</span><span class="n">DIV</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="여담">여담</h2>

<p>키타마사법에 대한 설명은 다른 곳에 해두겠다…. 그리고 이 문제의 하위 문제인 블록 1~3까지도 풀 수 있으니 참고바란다.</p>]]></content><author><name>PolarisSoda</name></author><category term="PS" /><category term="DP" /><category term="Kitamasa" /><summary type="html"><![CDATA[Link]]></summary></entry><entry><title type="html">An exhibit of Markdown</title><link href="/jekyll-theme-yat/markdown/2018/12/05/an-exhibit-of-markdown.html" rel="alternate" type="text/html" title="An exhibit of Markdown" /><published>2018-12-05T00:00:00+00:00</published><updated>2018-12-05T00:00:00+00:00</updated><id>/jekyll-theme-yat/markdown/2018/12/05/an-exhibit-of-markdown</id><content type="html" xml:base="/jekyll-theme-yat/markdown/2018/12/05/an-exhibit-of-markdown.html"><![CDATA[<p>This note demonstrates some of what <a href="https://daringfireball.net/projects/markdown/">Markdown</a> is capable of doing.</p>

<h2 id="an-exhibit-of-markdown">An exhibit of Markdown</h2>

<p><em>Note: Feel free to play with this page. Unlike regular notes, this doesn’t automatically save itself.</em></p>

<h2 id="basic-formatting">Basic formatting</h2>

<p>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</p>

<p>Paragraphs must be separated by a blank line. Basic formatting of <em>italics</em> and <strong>bold</strong> is supported. This <em>can be <strong>nested</strong> like</em> so.</p>

<h2 id="lists">Lists</h2>

<h3 id="ordered-list">Ordered list</h3>

<ol>
  <li>Item 1</li>
  <li>A second item</li>
  <li>Number 3</li>
  <li>Ⅳ</li>
</ol>

<p><em>Note: the fourth item uses the Unicode character for <a href="https://www.fileformat.info/info/unicode/char/2163/index.htm">Roman numeral four</a>.</em></p>

<h3 id="unordered-list">Unordered list</h3>

<ul>
  <li>An item</li>
  <li>Another item</li>
  <li>Yet another item</li>
  <li>And there’s more…</li>
</ul>

<h2 id="paragraph-modifiers">Paragraph modifiers</h2>

<h3 id="code-block">Code block</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.
</code></pre></div></div>

<p>You can also make <code class="language-plaintext highlighter-rouge">inline code</code> to add code into other things.</p>

<h3 id="quote">Quote</h3>

<blockquote>
  <p>Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.</p>
</blockquote>

<h2 id="headings">Headings</h2>

<p>There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character.</p>

<h3 id="headings-can-also-contain-formatting">Headings <em>can</em> also contain <strong>formatting</strong></h3>

<h3 id="they-can-even-contain-inline-code">They can even contain <code class="language-plaintext highlighter-rouge">inline code</code></h3>

<p>Of course, demonstrating what headings look like messes up the structure of the page.</p>

<p>I don’t recommend using more than three or four levels of headings here, because, when you’re smallest heading isn’t too small, and you’re largest heading isn’t too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.</p>

<h2 id="urls">URLs</h2>

<p>URLs can be made in a handful of ways:</p>

<ul>
  <li>A named link to <a href="https://www.markitdown.net/">MarkItDown</a>. The easiest way to do these is to select what you want to make a link and hit <code class="language-plaintext highlighter-rouge">Ctrl+L</code>.</li>
  <li>Another named link to <a href="https://www.markitdown.net/">MarkItDown</a></li>
  <li>Sometimes you just want a URL like <a href="https://www.markitdown.net/">https://www.markitdown.net/</a>.</li>
</ul>

<h2 id="horizontal-rule">Horizontal rule</h2>

<p>A horizontal rule is a line that goes across the middle of the page.</p>

<hr />

<p>It’s sometimes handy for breaking things up.</p>

<h2 id="images">Images</h2>

<p>Markdown can also contain images. I’ll need to add something here sometime.</p>

<h2 id="finally">Finally</h2>

<p>There’s actually a lot more to Markdown than this. See the official <a href="https://daringfireball.net/projects/markdown/basics">introduction</a> and <a href="https://daringfireball.net/projects/markdown/syntax">syntax</a> for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.</p>]]></content><author><name>PolarisSoda</name></author><category term="markdown" /><category term="example" /><category term="markdown" /><summary type="html"><![CDATA[This note demonstrates some of what Markdown is capable of doing.]]></summary></entry><entry><title type="html">Mathjax Test</title><link href="/jekyll-theme-yat/markdown/2018/05/26/mathjax-test.html" rel="alternate" type="text/html" title="Mathjax Test" /><published>2018-05-26T00:00:00+00:00</published><updated>2018-05-26T00:00:00+00:00</updated><id>/jekyll-theme-yat/markdown/2018/05/26/mathjax-test</id><content type="html" xml:base="/jekyll-theme-yat/markdown/2018/05/26/mathjax-test.html"><![CDATA[<ul>
  <li>A safe integer is an integer that
    <ul>
      <li>can be exactly represented as an IEEE-754 double precision number, and</li>
      <li>whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation</li>
    </ul>
  </li>
  <li>For example, $ 2 ^ {53} - 1 $ is a safe integer,
    <ul>
      <li>it can be exactly represented</li>
    </ul>
  </li>
</ul>]]></content><author><name>PolarisSoda</name></author><category term="markdown" /><category term="test" /><summary type="html"><![CDATA[A safe integer is an integer that can be exactly represented as an IEEE-754 double precision number, and whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation For example, $ 2 ^ {53} - 1 $ is a safe integer, it can be exactly represented]]></summary></entry><entry><title type="html">Video example</title><link href="/jekyll-theme-yat/example/2017/12/18/video-example.html" rel="alternate" type="text/html" title="Video example" /><published>2017-12-18T00:00:00+00:00</published><updated>2017-12-18T00:00:00+00:00</updated><id>/jekyll-theme-yat/example/2017/12/18/video-example</id><content type="html" xml:base="/jekyll-theme-yat/example/2017/12/18/video-example.html"><![CDATA[<h2 id="canon-in-d-pachelbels-canon---cello--piano-best-wedding-version">Canon in D (Pachelbel’s Canon) - Cello &amp; Piano [BEST WEDDING VERSION]</h2>
<p>Some of you know that we occasionally play for weddings. As you can imagine, we get a LOT of requests for Canon in D, and we discovered that there were no good arrangements available anywhere for piano and cello! Hard to believe given its popularity. So we decided to make our own! We tried to stick as closely to the original as possible (which was written for three violins and basso continuo), and we performed it <em>not</em> at a snail’s pace so the bride can actually make it down the aisle without putting everyone to sleep. 🙊(Yeah, we said it! Nobody likes a slow processional!) Also, the number one complaint about this piece from cellists is always how booooring it is to play because they literally have to play the same 8 bass notes over and over for the entire piece. Problem solved with this arrangement because the cello never has to play the bass! 🙌(The piano does, but we get lots of other fun stuff too so it’s ok!) So for all you musicians out there playing weddings, we hope you enjoy playing this arrangement a little more than the ones you were used to…You can get it from www.musicnotes.com. 😊Be sure to let us know in the comments if you do!</p>

<p><img src="//www.youtube.com/watch?v=Ptk_1Dc2iPY" alt="" /></p>

<h2 id="gucci-hallucination--the-line-animation--gucci">GUCCI HALLUCINATION / THE LINE ANIMATION / GUCCI</h2>
<p>BACKGROUND /</p>

<p>Gucci share their creative vision through a series of surreal animated paintings by acclaimed artist Ignasi Monreal and The Line Animation studio. The animations make up part of a larger campaign shared via social media, above the line and print.</p>

<p>APPROACH /</p>

<p>Our aim was to ground and accentuate the outlandish scenarios with ambient sound design. Neither proclaiming to be positive or negative, the sound conveys a sense of the uncanny and leaves the audience with nothing but their own interpretations. their creative vision through a series of surreal animated paintings by acclaimed artist Ignasi Monreal and The Line Animation studio. The animations make up part of a larger campaign shared via social media, above the line and print.</p>

<p><img src="https://vimeo.com/263856289" alt="" /></p>

<h2 id="finneas-demos-how-he-builds-songs-for-billie-eilish">FINNEAS Demos How He Builds Songs For Billie Eilish</h2>
<p>Grammy Award-winning musician and producer FINNEAS sits down with Pitchfork and closely examines his creative process while working on some of the biggest hit songs of the past couple years. FINNEAS explores the sounds that brought upon 
some of his greatest musical breakthroughs in songs such as bad guy, bury a friend, ocean eyes, when the party’s over, I Lost a Friend, Used to This and much more.</p>

<p><img src="https://dai.ly/x7tgcev" alt="" /></p>

<h2 id="2019-bmw-vision-m-next-concept-hd">2019 BMW Vision M NEXT Concept (HD)</h2>

<p>In future, drivers will be able to choose whether they wish to be driven or do the driving themselves. With the BMW Vision M NEXT, the BMW Group is revealing its take on how driving pleasure might look in future. It offers a foretaste of the BMW M brand’s electrified future by placing the focus squarely on the actively engaged driver. Intelligent technologies provide comprehensive yet carefully targeted assistance to turn them into the ultimate driver.</p>

<p><img src="https://www.dailymotion.com/video/x7bur2y" alt="" /></p>

<h2 id="this-is-the-poster-image">This is the poster image</h2>
<p>In modern browsers, adding a video to your page is as easy as adding an image. No longer do you need to deal with special plug-ins or require crazy markup, you can do it with a single element.
<img src="//www.html5rocks.com/en/tutorials/video/basics/devstories.webm" alt="video" /></p>]]></content><author><name>PolarisSoda</name></author><category term="example" /><category term="video" /><summary type="html"><![CDATA[Canon in D (Pachelbel’s Canon) - Cello &amp; Piano [BEST WEDDING VERSION] Some of you know that we occasionally play for weddings. As you can imagine, we get a LOT of requests for Canon in D, and we discovered that there were no good arrangements available anywhere for piano and cello! Hard to believe given its popularity. So we decided to make our own! We tried to stick as closely to the original as possible (which was written for three violins and basso continuo), and we performed it not at a snail’s pace so the bride can actually make it down the aisle without putting everyone to sleep. 🙊(Yeah, we said it! Nobody likes a slow processional!) Also, the number one complaint about this piece from cellists is always how booooring it is to play because they literally have to play the same 8 bass notes over and over for the entire piece. Problem solved with this arrangement because the cello never has to play the bass! 🙌(The piano does, but we get lots of other fun stuff too so it’s ok!) So for all you musicians out there playing weddings, we hope you enjoy playing this arrangement a little more than the ones you were used to…You can get it from www.musicnotes.com. 😊Be sure to let us know in the comments if you do!]]></summary></entry><entry><title type="html">Table example</title><link href="/jekyll-theme-yat/example/2017/12/15/table-example.html" rel="alternate" type="text/html" title="Table example" /><published>2017-12-15T00:00:00+00:00</published><updated>2017-12-15T00:00:00+00:00</updated><id>/jekyll-theme-yat/example/2017/12/15/table-example</id><content type="html" xml:base="/jekyll-theme-yat/example/2017/12/15/table-example.html"><![CDATA[<h2 id="table-example-as-below">Table example as below</h2>

<p><strong>For now, these extended features are provided:</strong></p>

<ul>
  <li>Cells spanning multiple columns</li>
  <li>Cells spanning multiple rows</li>
  <li>Cells text align separately</li>
  <li>Table header not required</li>
  <li>Grouped table header rows or data rows</li>
</ul>

<h3 id="rowspan-and-colspan">Rowspan and Colspan</h3>
<p>^^ in a cell indicates it should be merged with the cell above.<br />
This feature is contributed by <a href="https://github.com/pmccloghrylaing">pmccloghrylaing</a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">Stage</th>
      <th style="text-align: right">Direct Products</th>
      <th style="text-align: right">ATP Yields</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">Glycolysis</td>
      <td style="text-align: right">2 ATP                   |</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: right">^^</td>
      <td style="text-align: right">2 NADH</td>
      <td style="text-align: right">3–5 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">Pyruvaye oxidation</td>
      <td style="text-align: right">2 NADH</td>
      <td style="text-align: right">5 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">Citric acid cycle</td>
      <td style="text-align: right">2 ATP           |</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: right">^^</td>
      <td style="text-align: right">6 NADH</td>
      <td style="text-align: right">15 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">^^</td>
      <td style="text-align: right">2 FADH</td>
      <td style="text-align: right">3 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">30–32 ATP                         ||</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
</table>

<p>[ Net ATP yields per hexose]</p>

<h3 id="multiline">Multiline</h3>
<p>A backslash at end to join cell contents with the following lines.<br />
This feature is contributed by <a href="https://github.com/Lucas-C">Lucas-C</a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">:     Easy Multiline     :||</th>
      <th style="text-align: left"> </th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange  \</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange  \</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange  \</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
  </tbody>
</table>

<h3 id="headerless">Headerless</h3>
<p>Table header can be eliminated.</p>

<table>
  <tbody>
    <tr>
      <td>♜</td>
      <td> </td>
      <td>♝</td>
      <td>♛</td>
      <td>♚</td>
      <td>♝</td>
      <td>♞</td>
      <td>♜</td>
    </tr>
    <tr>
      <td> </td>
      <td>♟</td>
      <td>♟</td>
      <td>♟</td>
      <td> </td>
      <td>♟</td>
      <td>♟</td>
      <td>♟</td>
    </tr>
    <tr>
      <td>♟</td>
      <td> </td>
      <td>♞</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>♗</td>
      <td> </td>
      <td> </td>
      <td>♟</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td>♙</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td>♘</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>♙</td>
      <td>♙</td>
      <td>♙</td>
      <td>♙</td>
      <td> </td>
      <td>♙</td>
      <td>♙</td>
      <td>♙</td>
    </tr>
    <tr>
      <td>♖</td>
      <td>♘</td>
      <td>♗</td>
      <td>♕</td>
      <td>♔</td>
      <td> </td>
      <td> </td>
      <td>♖</td>
    </tr>
  </tbody>
</table>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|:     Fruits <span class="se">\|\|</span> Food           :|||
|:-------- |:-------- |:------------ |
| Apple    |: Apple  :|    Apple     <span class="err">\</span>
| Banana   |  Banana  |    Banana    <span class="err">\</span>
| Orange   |  Orange  |    Orange    |
|:   Rowspan is 5   :||:  How's it? :|
|^^   A. Peach       ||^^ 1. Fine    |
|^^   B. Orange      ||^^ 2. Bad  $I = <span class="se">\i</span>nt <span class="se">\r</span>ho R^{2} dV$     |
|^^   C. Banana      ||   It's OK! !<span class="p">[</span><span class="nv">example image</span><span class="p">][</span><span class="ss">my-image</span><span class="p">]</span>  |
</code></pre></div></div>

<h3 id="text-alignment">Text Alignment</h3>
<p>Table cell can be set alignment separately.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">\:Fruits         |</th>
      <th style="text-align: left">Food   :</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">Fruits\::        |</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">: \:Fruits       :|</th>
      <th style="text-align: left"> </th>
      <th style="text-align: left">:       Food     :|</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
      <td style="text-align: left">:   Strawberry    :</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple  &amp;  Banana |</td>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">Peach        :|</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>: \:Fruits       :|</td>
      <td> </td>
      <td>:       Food     :|</td>
      <td> </td>
    </tr>
    <tr>
      <td>Apple</td>
      <td>Banana</td>
      <td>Orange</td>
      <td>:   Strawberry    :</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">:     Fruits || Food           :||</th>
      <th style="text-align: left"> </th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">: Apple  :</td>
      <td style="text-align: left">Apple     \</td>
    </tr>
    <tr>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Banana    \</td>
    </tr>
    <tr>
      <td style="text-align: left">Orange</td>
      <td style="text-align: left">Orange</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">:   Rowspan is 5   :|</td>
      <td style="text-align: left">:  How’s it? :</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">^^   A. Peach       |</td>
      <td style="text-align: left">^^ 1. Fine</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">^^   B. Orange      |</td>
      <td style="text-align: left">^^ 2. Bad  $I = \int \rho R^{2} dV$</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">^^   C. Banana      |</td>
      <td style="text-align: left">It’s OK! ![example image](http://www.unexpected-vortices.com/sw/rippledoc/example-image.jpg "An exemplary image")</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
</table>]]></content><author><name>PolarisSoda</name></author><category term="example" /><category term="table" /><summary type="html"><![CDATA[Table example as below]]></summary></entry><entry><title type="html">Mermaid example</title><link href="/jekyll-theme-yat/example/2017/12/08/mermaid-example.html" rel="alternate" type="text/html" title="Mermaid example" /><published>2017-12-08T00:00:00+00:00</published><updated>2017-12-08T00:00:00+00:00</updated><id>/jekyll-theme-yat/example/2017/12/08/mermaid-example</id><content type="html" xml:base="/jekyll-theme-yat/example/2017/12/08/mermaid-example.html"><![CDATA[<h3 id="1-pie-chart">1. Pie chart</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoicGllIHRpdGxlIFBldHMgYWRvcHRlZCBieSB2b2x1bnRlZXJzXG5cIkRvZ3NcIiA6IDM4NlxuXCJDYXRzXCIgOiA4NVxuXCJSYXRzXCIgOiAzNSIsIm1lcm1haWQiOm51bGx9" /></p>

<h3 id="2-sequence-diagram">2. sequence diagram</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5BbGljZSAtPj4gQm9iOiBIZWxsbyBCb2IsIGhvdyBhcmUgeW91P1xuQm9iLS0-PkpvaG46IEhvdyBhYm91dCB5b3UgSm9obj9cbkJvYi0teCBBbGljZTogSSBhbSBnb29kIHRoYW5rcyFcbkJvYi14IEpvaG46IEkgYW0gZ29vZCB0aGFua3MhXG5Ob3RlIHJpZ2h0IG9mIEpvaG46IEJvYiB0aGlua3MgYSBsb25nPGJyLz5sb25nIHRpbWUsIHNvIGxvbmc8YnIvPnRoYXQgdGhlIHRleHQgZG9lczxici8-bm90IGZpdCBvbiBhIHJvdy5cbiUlLVxuQm9iLS0-QWxpY2U6IENoZWNraW5nIHdpdGggSm9obi4uLlxuQWxpY2UtPkpvaG46IFllcy4uLiBKb2huLCBob3cgYXJlIHlvdT8iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZ3JhcGggVERcbkFbQ2hyaXN0bWFzXSAtLT58R2V0IG1vbmV5fCBCKEdvIHNob3BwaW5nKVxuQiAtLT4gQ3tMZXQgbWUgdGhpbmt9XG5DIC0tPnxPbmV8IERbTGFwdG9wXVxuQyAtLT58VHdvfCBFW2lQaG9uZV1cbkMgLS0-fFRocmVlfCBGW2ZhOmZhLWNhciBDYXJdIiwibWVybWFpZCI6bnVsbH0" /></p>

<h3 id="3-class-diagram">3. Class diagram</h3>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5BbmltYWwgPHwtLSBEdWNrXG5BbmltYWwgPHwtLSBGaXNoXG5BbmltYWwgPHwtLSBaZWJyYVxuQW5pbWFsIDogK2ludCBhZ2VcbkFuaW1hbCA6ICtTdHJpbmcgZ2VuZGVyXG5BbmltYWw6ICtpc01hbW1hbCgpXG5BbmltYWw6ICttYXRlKClcbmNsYXNzIER1Y2t7XG4rU3RyaW5nIGJlYWtDb2xvclxuK3N3aW0oKVxuK3F1YWNrKClcbn1cbmNsYXNzIEZpc2h7XG4taW50IHNpemVJbkZlZXRcbi1jYW5FYXQoKVxufVxuY2xhc3MgWmVicmF7XG4rYm9vbCBpc193aWxkXG4rcnVuKClcbn0iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<h3 id="4-state-diagram">4. State diagram</h3>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic3RhdGVEaWFncmFtXG5bKl0gLS0-IFN0aWxsXG5TdGlsbCAtLT4gWypdXG4lJS1cblN0aWxsIC0tPiBNb3Zpbmdcbk1vdmluZyAtLT4gU3RpbGxcbk1vdmluZyAtLT4gQ3Jhc2hcbkNyYXNoIC0tPiBbKl0iLCJtZXJtYWlkIjpudWxsfQ" /></p>]]></content><author><name>PolarisSoda</name></author><category term="example" /><category term="mermaid" /><summary type="html"><![CDATA[1. Pie chart]]></summary></entry></feed>